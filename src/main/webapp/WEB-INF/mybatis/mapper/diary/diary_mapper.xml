<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="diary_mapper">

    <!-- TalkToBotAllResultMap: SQL 결과를 Java 객체로 매핑 -->
    <resultMap id="TalkToBotAllResultMap" type="com.app.dto.diary.TalkToBotAll">
        <!-- user_id 열을 Java 객체의 userId 속성에 매핑 -->
        <result property="userId" column="user_id"/>
        <!-- room_index 열을 Java 객체의 roomIndex 속성에 매핑 -->
        <result property="roomIndex" column="room_index"/>
        <!-- question_html 열을 Java 객체의 questionHtml 속성에 매핑 -->
        <result property="questionHtml" column="question_html"/>
        <!-- chat_html 열을 Java 객체의 chatHtml 속성에 매핑 -->
        <result property="chatHtml" column="chat_html"/>
    </resultMap>

    <!-- User Diary Insert: 사용자 다이어리를 삽입하는 쿼리 -->
    <insert id="insertUserDiary" parameterType="UserDiary">
        INSERT INTO user_diary
        VALUES (
            <!-- 다이어리 ID는 userId와 'ud' 그리고 시퀀스를 조합하여 생성 -->
            #{userId} || 'ud' || TO_CHAR(seq_diary_id.NEXTVAL),
            <!-- 나머지 속성들도 UserDiary 객체에서 가져와 삽입 -->
            #{userId}, #{diaryTitle}, SYSDATE, #{diaryContent, jdbcType=CLOB}
        )
    </insert>
    
    <!-- getDiaryListByUserId: 특정 사용자의 다이어리 목록을 조회하는 쿼리 -->
    <select id="getDiaryListByUserId" parameterType="String" resultType="UserDiary">
        SELECT diary_id, user_id, diary_title, 
               TO_CHAR(write_date, 'yyyy-MM-dd') as write_date, 
               diary_content
        FROM user_diary
        WHERE user_id = #{userId}
        ORDER BY write_date DESC
    </select>
    
    <!-- modifyDiary: 사용자 다이어리를 수정하는 쿼리 -->
    <update id="modifyDiary" parameterType="UserDiary">
        UPDATE user_diary
        SET diary_title = #{diaryTitle}, 
            write_date = TO_DATE(#{writeDate}, 'yyyy-MM-dd'), 
            diary_content = #{diaryContent, jdbcType=CLOB}
        WHERE diary_id = #{diaryId}
    </update>
    
    <!-- deleteDiary: 다이어리를 삭제하는 쿼리 -->
    <delete id="deleteDiary" parameterType="String">
        DELETE FROM user_diary
        WHERE diary_id = #{diaryId}
    </delete>

    <!-- insertTalkToBotAllByQuestion: 대화 데이터를 삽입하는 쿼리 -->
    <insert id="insertTalkToBotAllByQuestion" parameterType="TalkToBotAll">
        INSERT INTO talk_to_bot_all (user_id, room_index, data_id, question_html) 
        VALUES (#{userId}, #{roomIndex}, #{dataId}, #{questionHtml})
    </insert>
    
    <!-- updateTalkToBotAllByChat: 대화 데이터를 업데이트하는 쿼리 -->
    <update id="updateTalkToBotAllByChat" parameterType="TalkToBotAll">
        UPDATE talk_to_bot_all
        SET chat_html = #{chatHtml}
        WHERE user_id = #{userId} AND room_index = #{roomIndex}
    </update>
    
    <!-- selectTalkToBotAllByUserId: 사용자의 모든 대화 데이터를 조회하는 쿼리 -->
    <select id="selectTalkToBotAllByUserId" parameterType="String" resultMap="TalkToBotAllResultMap">
        SELECT user_id, room_index, data_id, question_html, chat_html
        FROM talk_to_bot_all
        WHERE user_id = #{userId}
        ORDER BY room_index
    </select>
    
    <!-- createTalkToBot: 동적으로 새로운 대화 테이블을 생성하는 쿼리 -->
    <update id="createTalkToBot" parameterType="TalkToBotAll">
        CREATE TABLE talk_to_bot_${dataId} (
            data_id VARCHAR2(100) NOT NULL,
            save_date DATE DEFAULT SYSDATE,
            user_id VARCHAR2(100) NOT NULL,
            room_index NUMBER NOT NULL,
            message_index NUMBER,
            bot_answer CLOB,
            user_question VARCHAR2(4000)
        )
    </update>
    
    <!-- insertUserQuestion: 사용자 질문 데이터를 삽입하는 쿼리 -->
    <insert id="insertUserQuestion" parameterType="TalkToBotData">
        INSERT INTO talk_to_bot_${dataId} (data_id, user_id, room_index, message_index, user_question)
        VALUES (#{dataId}, #{userId}, #{roomIndex}, #{messageIndex}, #{userQuestion})
    </insert>
    
    <!-- insertBotAnswer: 봇 응답 데이터를 삽입하는 쿼리 -->
    <insert id="insertBotAnswer" parameterType="TalkToBotData">
        INSERT INTO talk_to_bot_${dataId} (data_id, user_id, room_index, message_index, bot_answer)
        VALUES (#{dataId}, #{userId}, #{roomIndex}, #{messageIndex}, #{botAnswer, jdbcType=CLOB})
    </insert>
    
    <!-- selectAllTalkToBotData: 모든 대화 데이터를 조회하는 쿼리 -->
    <select id="selectAllTalkToBotData" parameterType="TalkToBotAll" resultType="TalkToBotData">
        SELECT data_id, user_id, room_index, message_index, bot_answer, user_question
        FROM talk_to_bot_${dataId}
    </select>
    
    <!-- dropTalkToBot: 특정 대화 테이블을 삭제하는 쿼리 -->
    <update id="dropTalkToBot" parameterType="TalkToBotAll">
        DROP TABLE talk_to_bot_${dataId}
    </update>

    <!-- deleteTalkToBotAll: talk_to_bot_all 테이블에서 대화 데이터를 삭제하는 쿼리 -->
    <delete id="deleteTalkToBotAll" parameterType="TalkToBotAll">
        DELETE FROM talk_to_bot_all
        WHERE user_id = #{userId}
            AND data_id = #{dataId}
    </delete>
    
    <!-- InsertExcludedKeyword: 제외할 키워드를 삽입하는 쿼리 -->
    <insert id="InsertExcludedKeyword" parameterType="ExcludedKeyword">
        INSERT INTO EXCLUDED_KEYWORDS (user_id, data_id, data_index, message_index, excluded_keyword)
        VALUES (#{userId}, #{dataId}, #{dataIndex}, #{messageIndex}, #{excludedKeyword})
    </insert>
    
    <!-- selectExcludedKeyword: 특정 사용자의 제외할 키워드를 조회하는 쿼리 -->
    <select id="selectExcludedKeyword" parameterType="ExcludedKeyword" resultType="ExcludedKeyword">
        SELECT user_id, data_id, data_index, excluded_keyword
        FROM EXCLUDED_KEYWORDS
        WHERE user_id = #{userId}
            AND data_id = #{dataId}
        ORDER BY save_date
    </select>
    
    <!-- deleteExcludedKeywords: 특정 사용자의 모든 제외할 키워드를 삭제하는 쿼리 -->
    <delete id="deleteExcludedKeywords" parameterType="TalkToBotAll">
        DELETE FROM EXCLUDED_KEYWORDS
        WHERE user_id = #{userId}
            AND data_id = #{dataId}
    </delete>
    
    <!-- updateBotAnswer: 봇 응답 데이터를 업데이트하는 쿼리 -->
    <update id="updateBotAnswer" parameterType="TalkToBotData">
        UPDATE talk_to_bot_${dataId}
        SET bot_answer = #{botAnswer, jdbcType=CLOB}
        WHERE message_index = #{messageIndex}
        AND bot_answer IS NOT NULL
    </update>
    
    <!-- selectExcludedKeywordsByRoomIdMessageIndex: 특정 데이터 ID의 제외할 키워드를 조회하는 쿼리 -->
    <select id="selectExcludedKeywordsByRoomIdMessageIndex" parameterType="ExcludedKeyword" resultType="ExcludedKeyword">
        SELECT 
            excluded_keyword
        FROM EXCLUDED_KEYWORDS
        WHERE data_id = #{dataId}
    </select>
    
    <!-- deleteExcludedKeyword: 특정 인덱스의 제외할 키워드를 삭제하는 쿼리 -->
    <delete id="deleteExcludedKeyword" parameterType="ExcludedKeyword">
        DELETE FROM EXCLUDED_KEYWORDS
        WHERE user_id = #{userId}
            AND data_id = #{dataId}
            AND data_index = #{dataIndex}
    </delete>
    
    <!-- insertExcludedKeywordNotMessageIndex: 중복되지 않는 제외할 키워드를 삽입하는 쿼리 -->
    <insert id="insertExcludedKeywordNotMessageIndex" parameterType="ExcludedKeyword">
        INSERT INTO EXCLUDED_KEYWORDS (user_id, data_id, data_index, excluded_keyword)
        SELECT #{userId}, #{dataId}, #{dataIndex}, #{excludedKeyword}
        FROM dual
        WHERE NOT EXISTS (
            SELECT 1
            FROM EXCLUDED_KEYWORDS
            WHERE excluded_keyword = #{excludedKeyword}
            AND user_id = #{userId}
            AND data_id = #{dataId}
        )
    </insert>
    
    <!-- updateQuestionTitle: 질문 제목을 업데이트하는 쿼리 -->
    <update id="updateQuestionTitle" parameterType="TalkToBotAll">
        UPDATE talk_to_bot_all
        SET question_html = #{questionHtml}
        WHERE user_id = #{userId} AND data_id = #{dataId}
    </update>
    
    <!-- selectDiaryListByKeyword: 키워드로 다이어리 목록을 조회하는 쿼리 -->
    <select id="selectDiaryListByKeyword" resultType="UserDiary">
        SELECT 
            diary_id, user_id, diary_title, 
            TO_CHAR(write_date, 'YYYY-MM-DD') AS write_date,
            diary_content
        FROM user_diary
        WHERE user_id = #{userId}
        <if test="keywordsList != null and keywordsList.size() > 0">
            AND (
                <!-- 키워드 리스트에서 각 키워드를 다이어리 내용에 포함되는지 확인 -->
                <foreach collection="keywordsList" item="keyword" separator="AND">
                    diary_content LIKE '%' || #{keyword} || '%'
                </foreach>
            )
        </if>
    </select>
    
</mapper>
